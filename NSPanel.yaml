  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Nspanel Hotspot"
    password: "Swordf1sh"

captive_portal:

time:
  - platform: sntp
    id: sntp_time
    timezone: Asia/Dubai

    # Turn Off all the lights at 6 AM

    on_time:
      - seconds: 0
        minutes: 0
        hours: 6
        days_of_week: MON-SUN
        then:
          - switch.turn_off: ${switch_id}_relay_1
          - switch.turn_off: ${switch_id}_relay_2

    # Turn ON all the lights at 6 PM
          
      - seconds: 0
        minutes: 0
        hours: 17
        days_of_week: MON-SUN
        then:
          - switch.turn_on: ${switch_id}_relay_1
          - switch.turn_on: ${switch_id}_relay_2



logger:


ota:

web_server:


# HTTP Request component needed for wttr.in weather web query
http_request:
  useragent: esphome/device
  timeout: 5s

substitutions:
# Unique ID for Sensors.
  switch_id: "living_room"
  friendly_name: "NSPanel"
  wttr_location: "24.2248,55.7452"

uart:
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200
  id: tf_uart

external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 0s

  - source: github://pr#2702
    components: ["nspanel"]    
    refresh: 0s

# Update Weather Hourly
interval:
  - interval: 1min
    then:
       - script.execute: nspanel_weather



# NSPanel Component for access to panel.
# Updates temperature, date, time, Relay indicators
# Provides JSON interface to panel
nspanel:
  id: nspanel1
  time_id: sntp_time
  temperature: ${switch_id}_temperature
  eco_mode_switch: ${switch_id}_eco_mode
  screen_power_switch: ${switch_id}_screen_power
 
  relays:
    - ${switch_id}_relay_1
    - ${switch_id}_relay_2
   

  on_json_message:
    then:
      # Widget for Switch
      - if:
          condition:
            lambda: 'return (type == 0x86 && root.containsKey("id") && strcasecmp(root["id"], "light1") == 0 );'
          then:
            - if:
                condition:
                  lambda: 'return (root["params"].containsKey("switch") && root["params"]["switch"] == "on");'
                then:
                  - switch.toggle: ${switch_id}_relay_1
                    
            - if:
                condition:
                  lambda: 'return (root["params"].containsKey("switch") && root["params"]["switch"] == "off");'
                then:
                  - switch.toggle: ${switch_id}_relay_1


      - if:
          condition:
            lambda: 'return (type == 0x86 && root.containsKey("id") && strcasecmp(root["id"], "light2") == 0);'
          then:
            - if:
                condition:
                  lambda: 'return (root["params"].containsKey("switch") && root["params"]["switch"] == "on");'
                then:
                  - switch.toggle: ${switch_id}_relay_2

            - if:
                condition:
                  lambda: 'return (root["params"].containsKey("switch") && root["params"]["switch"] == "off");'
                then:
                  - switch.toggle: ${switch_id}_relay_2

      - if:
          condition:
            lambda: 'return (type == 0x86 && root.containsKey("id") && strcasecmp(root["id"], "allon") == 0);'
          then:
            - if:
                condition:
                  lambda: 'return (root["params"].containsKey("switch") && root["params"]["switch"] == "on");'
                then:
                  - switch.turn_on: ${switch_id}_relay_1
                  - switch.turn_on: ${switch_id}_relay_2

            - if:
                condition:
                  lambda: 'return (root["params"].containsKey("switch") && root["params"]["switch"] == "off");'
                then:
                  - switch.turn_on: ${switch_id}_relay_1
                  - switch.turn_on: ${switch_id}_relay_2

      - if:
          condition:
            lambda: 'return (type == 0x86 && root.containsKey("id") && strcasecmp(root["id"], "alloff") == 0);'
          then:
            - if:
                condition:
                  lambda: 'return (root["params"].containsKey("switch") && root["params"]["switch"] == "on");'
                then:
                  - switch.turn_off: ${switch_id}_relay_1
                  - switch.turn_off: ${switch_id}_relay_2

            - if:
                condition:
                  lambda: 'return (root["params"].containsKey("switch") && root["params"]["switch"] == "off");'
                then:
                  - switch.turn_off: ${switch_id}_relay_1
                  - switch.turn_off: ${switch_id}_relay_2
      - script.execute: light_update

          
 
output:
  - platform: ledc
    id: ${switch_id}_buzzer_out
    pin:
      number: 21


#api:
#  id: api_id
#  services:
    # Expose "send_json" to Home Assistant for scripts/testing
#    - service: send_json
#      variables:
#        my_type: int
#        my_json: string
#      then:
#        - lambda: 'id(nspanel1).send_json_command(my_type,my_json);'


switch:
  # Restart Switch in HA
  - platform: restart
    name: "${switch_id} Restart"

  - platform: gpio
    # Panel Left Hand relay
    name: ${switch_id} Switch 1
    id: ${switch_id}_relay_1
    pin:
      number: 22
      
  - platform: gpio
    # Panel Right Hand relay
    name: ${switch_id} Switch 2
    id: ${switch_id}_relay_2
    pin:
      number: 19

  - platform: gpio
    # Panel Screen Power
    name: ${switch_id} Screen Power
    id: ${switch_id}_screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_OFF

    on_turn_on:
      # Initiliase Screen - These timings could be more aggressive
      then:
        - delay: 6s
        - script.execute: nspanel_init
        - delay: 6s
        - script.execute: nspanel_weather
          # Must send Wifi State for widgets to update (particulalry after power-on of screen only
          # code taken from within NSPanel component code
        - lambda: |-
            uint8_t rssi = 0;
            rssi = (wifi::global_wifi_component->wifi_rssi() * -1) / 20.0f;
            std::string json_str = json::build_json([rssi](JsonObject root) {
              root["wifiState"] = "connected";
              root["rssiLevel"] = rssi;
            });
            id(nspanel1).send_json_command(0x85, json_str);
            
  - platform: template
    # Template switch to enable/disable screen Saver
    name: ${switch_id} ScreenSaver Mode
    id: ${switch_id}_eco_mode
    entity_category: config
    restore_state: true
    assumed_state: off
    optimistic: true
    on_turn_on:
      - lambda: id(nspanel1).send_json_command(0x87,"{\"HMI_dimOpen\":1}");
    on_turn_off:
      - lambda: id(nspanel1).send_json_command(0x87,"{\"HMI_dimOpen\":0}");


binary_sensor:
# NS Panel Hard Switches

  ###### LEFT BUTTON BELOW DISPLAY TO TOGGLE RELAY#####
  - platform: gpio
    name: ${switch_id} Button Left
    id: left_button
    pin:
      number: 14
      inverted: true
    on_click:
      - switch.toggle: ${switch_id}_relay_1
      - script.execute: light_update

  - platform: gpio
    id: ${switch_id}_button_2
    name: ${switch_id} Button Right
    pin:
      number: 27
      inverted: true
    on_click:
      - switch.toggle: ${switch_id}_relay_2
      - script.execute: light_update
                
#
sensor:
# Extra sensor to keep track of plug uptime
  - platform: uptime
    name: ${switch_id} Uptime Sensor
# Wifi Signal
  - platform: wifi_signal
    name: "${switch_id} WiFi Signal Sensor"
    update_interval: 60s
# nspanel related temperature sensors
  - platform: adc
    id: ${switch_id}_ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db
  - platform: resistance
    id: ${switch_id}_resistance_sensor
    sensor: ${switch_id}_ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm
  - platform: ntc
    id: ${switch_id}_temperature
    sensor: ${switch_id}_resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25Â°C
      reference_resistance: 10kOhm
    name: "${switch_id} Temperature"

 
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${switch_id} IP
      disabled_by_default: False
      id: ip_address
    ssid:
      name: ${switch_id} SSID
      disabled_by_default: False
    bssid:
      name: ${switch_id} Mac-Address
      disabled_by_default: False





script:
  - id: light_update
    then:
      - lambda: |-
          if(id(${switch_id}_relay_1).state) {
            id(nspanel1).send_json_command(0x86,"{\"id\":\"light1\",\"params\":{\"switch\":\"on\"}}");
          } else {
            id(nspanel1).send_json_command(0x86,"{\"id\":\"light1\",\"params\":{\"switch\":\"off\"}}");

          } 
      - lambda: |-
          if(id(${switch_id}_relay_2).state) {
            id(nspanel1).send_json_command(0x86,"{\"id\":\"light2\",\"params\":{\"switch\":\"on\"}}");
          } else {
            id(nspanel1).send_json_command(0x86,"{\"id\":\"light2\",\"params\":{\"switch\":\"off\"}}");

          } 
           
  - id: light_toggle
    then:
      - lambda: |-
          if(id(${switch_id}_relay_1).state) {
            id(nspanel1).send_json_command(0x86,"{\"id\":\"light1\",\"params\":{\"switch\":\"on\"}}");
          } else {
            id(nspanel1).send_json_command(0x86,"{\"id\":\"light1\",\"params\":{\"switch\":\"off\"}}");

          } 
      - lambda: |-
          if(id(${switch_id}_relay_2).state) {
            id(nspanel1).send_json_command(0x86,"{\"id\":\"light2\",\"params\":{\"switch\":\"on\"}}");
          } else {
            id(nspanel1).send_json_command(0x86,"{\"id\":\"light2\",\"params\":{\"switch\":\"off\"}}");

          }           
                  
  - id: screensaver_update
    then:
      - lambda: |-
          if(id(${switch_id}_eco_mode).state) {
            id(nspanel1).send_json_command(0x87,"{\"HMI_dimOpen\":1}");
          } else {
            id(nspanel1).send_json_command(0x87,"{\"HMI_dimOpen\":0}");
          } 
  - id: thermostat_update_state
    then:
      # Update Thermostat On/Off
      - lambda: id(nspanel1).send_json_command(0x84,"{\"ATCEnable\":1}");
 
  - id: thermostat_update_temp
    then:
      # Update Thermostat Temperature
      - lambda: id(nspanel1).send_json_command(0x84,"{\"ATCEnable\":1}");

  - id: nspanel_init
    # Script to initialise panel on full power on (or when screen is powered on from ESP)
    
    then:
      # Setup Widgets - must send all 8
      # Widget 1

      - lambda: |-
          id(nspanel1).send_json_command(0x86,"{\"HMI_resources\":[{\"index\":1,\"ctype\":\"device\",\"id\":\"light1\",\"uiid\":6}]}");
          id(nspanel1).send_json_command(0x86,"{\"relation\":[{\"ctype\":\"device\",\"id\":\"light1\",\"name\":\"Light-1\",\"online\":1,\"params\":{\"switch\":\"on\"}]}");

      # Widget 2
      - lambda: |-
          id(nspanel1).send_json_command(0x86,"{\"HMI_resources\":[{\"index\":2,\"ctype\":\"device\",\"id\":\"light2\",\"uiid\":6}]}");
          id(nspanel1).send_json_command(0x86,"{\"relation\":[{\"ctype\":\"device\",\"id\":\"light2\",\"name\":\"Light-2\",\"online\":1,\"params\":{\"switch\":\"on\"}]}");

      # Widget 3
      - lambda: |-
          id(nspanel1).send_json_command(0x86,"{\"HMI_resources\":[{\"index\":3,\"ctype\":\"device\",\"id\":\"allon\",\"uiid\":6}]}");
          id(nspanel1).send_json_command(0x86,"{\"relation\":[{\"ctype\":\"device\",\"id\":\"allon\",\"name\":\"All-ON\",\"online\":0,\"params\":{\"switch\":\"off\"}]}");

      # Widget 4
      - lambda: |-
          id(nspanel1).send_json_command(0x86,"{\"HMI_resources\":[{\"index\":4,\"ctype\":\"device\",\"id\":\"alloff\",\"uiid\":6}]}");
          id(nspanel1).send_json_command(0x86,"{\"relation\":[{\"ctype\":\"device\",\"id\":\"alloff\",\"name\":\"ALL-OFF\",\"online\":1,\"params\":{\"switch\":\"off\"}]}");


   
      # Delete Unwanted Wigets
      #- lambda: 'id(nspanel1).send_json_command(0x86,"{\"index\":3,\"type\":\"delete\"}");'    
      #- lambda: 'id(nspanel1).send_json_command(0x86,"{\"index\":4,\"type\":\"delete\"}");'
      - lambda: 'id(nspanel1).send_json_command(0x86,"{\"index\":5,\"type\":\"delete\"}");'      
      - lambda: 'id(nspanel1).send_json_command(0x86,"{\"index\":6,\"type\":\"delete\"}");'
      - lambda: 'id(nspanel1).send_json_command(0x86,"{\"index\":7,\"type\":\"delete\"}");'
      - lambda: 'id(nspanel1).send_json_command(0x86,"{\"index\":8,\"type\":\"delete\"}");'
      - script.execute: screensaver_update        
      - script.execute: light_update
      - script.execute: thermostat_update_state
      - script.execute: thermostat_update_temp      


  - id: nspanel_weather
    # Grab weather status (JSON) from https://wttr.in
    then:
      - logger.log: "nspanel_weather started"
      - lambda: |-
          WiFiClientSecure client;
          HTTPClient http;
          int wicon,wicon_out,whumid;
          std::string buffer;
          client.setInsecure();
          ESP_LOGD("nspanel_weather", "Init Complete");
          http.begin(client,"wttr.in",443,"/${wttr_location}?format=j2",true);
          http.useHTTP10(true);
          int httpCode = http.GET();
          if (httpCode > 0) {
            if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
              DynamicJsonDocument root(4000);
              DeserializationError error = deserializeJson(root, http.getStream());
              if (root.containsKey("current_condition")) {
                wicon = int( root["current_condition"][0]["weatherCode"].as<signed int>());
                whumid = int( root["current_condition"][0]["humidity"].as<signed int>());
                wicon_out = 30; // Unknown / Default
                if (wicon == 113) { wicon_out = 1; }  //    # Sunny      
                if (wicon == 116) { wicon_out = 2; }  //    # PartlyCloudy   
                if (wicon == 119) { wicon_out = 2; }  //    # Cloudy             
                if (wicon == 122) { wicon_out = 7; }  //    # VeryCloudy           
                if (wicon == 143) { wicon_out = 11; } //    # Fog                 
                if (wicon == 176) { wicon_out = 40; } //    # LightShowers     
                if (wicon == 179) { wicon_out = 24; } //    # LightSleetShowers 
                if (wicon == 182) { wicon_out = 24; } //    # LightSleet        
                if (wicon == 185) { wicon_out = 24; } //    # LightSleet        
                if (wicon == 200) { wicon_out = 42; } //    # ThunderyShowers  
                if (wicon == 227) { wicon_out = 20; } //    # LightSnow  
                if (wicon == 230) { wicon_out = 22; } //    # HeavySnow        
                if (wicon == 260) { wicon_out = 11; } //    # Fog                 
                if (wicon == 263) { wicon_out = 40; } //    # LightShowers     
                if (wicon == 266) { wicon_out = 40; } //    # LightRain      
                if (wicon == 281) { wicon_out = 24; } //    # LightSleet        
                if (wicon == 284) { wicon_out = 24; } //    # LightSleet        
                if (wicon == 293) { wicon_out = 40; } //    # LightRain      
                if (wicon == 296) { wicon_out = 40; } //    # LightRain      
                if (wicon == 299) { wicon_out = 18; } //    # HeavyShowers      
                if (wicon == 302) { wicon_out = 18; } //    # HeavyRain        
                if (wicon == 305) { wicon_out = 18; } //    # HeavyShowers      
                if (wicon == 308) { wicon_out = 18; } //    # HeavyRain        
                if (wicon == 311) { wicon_out = 24; } //    # LightSleet        
                if (wicon == 314) { wicon_out = 24; } //    # LightSleet        
                if (wicon == 317) { wicon_out = 24; } //    # LightSleet        
                if (wicon == 320) { wicon_out = 20; } //    # LightSnow  
                if (wicon == 323) { wicon_out = 22; } //    # LightSnowShowers 
                if (wicon == 326) { wicon_out = 22; } //    # LightSnowShowers 
                if (wicon == 329) { wicon_out = 22; } //    # HeavySnow        
                if (wicon == 332) { wicon_out = 22; } //    # HeavySnow        
                if (wicon == 335) { wicon_out = 29; } //    # HeavySnowShowers   
                if (wicon == 338) { wicon_out = 22; } //    # HeavySnow        
                if (wicon == 350) { wicon_out = 24; } //    # LightSleet        
                if (wicon == 353) { wicon_out = 24; } //    # LightSleet        
                if (wicon == 356) { wicon_out = 18; } //    # HeavyShowers      
                if (wicon == 359) { wicon_out = 18; } //    # HeavyRain        
                if (wicon == 362) { wicon_out = 24; } //    # LightSleetShowers 
                if (wicon == 365) { wicon_out = 24; } //    # LightSleetShowers 
                if (wicon == 368) { wicon_out = 22; } //    # LightSnowShowers 
                if (wicon == 371) { wicon_out = 29; } //    # HeavySnowShowers   
                if (wicon == 374) { wicon_out = 24; } //    # LightSleetShowers 
                if (wicon == 377) { wicon_out = 24; } //    # LightSleet        
                if (wicon == 386) { wicon_out = 42; } //    # ThunderyShowers  
                if (wicon == 389) { wicon_out = 42; } //    # ThunderyHeavyRain  
                if (wicon == 392) { wicon_out = 42; } //    # ThunderySnowShowers
                if (wicon == 395) { wicon_out = 29; } //    # HeavySnowShowers   
                id(nspanel1).send_json_command(0x83,"{\"humidity\":" + to_string(whumid) +"}");
                id(nspanel1).send_json_command(0x81,"{\"HMI_weather\":" + to_string(wicon_out) +",\"HMI_outdoorTemp\":{\"current\":" + root["current_condition"][0]["temp_C"].as<const char*>() + ",\"range\":\"" +root["weather"][0]["mintempC"].as<const char*>() + "," +  root["weather"][0]["maxtempC"].as<const char*>() + "\"}}");
              } else {
                ESP_LOGD("nspanel_weather", "Current Condition not found");
              }
            }              
          }


              
